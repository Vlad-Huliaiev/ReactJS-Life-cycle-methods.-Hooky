{"version":3,"sources":["Timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","isActive","autoStartTimer","props","autostart","startTimer","setState","i","count","interval","setInterval","prevState","step","componentWillUnmount","timerStart","timerOut","pauseTimer","timerStop","resetTimer","timerReset","this","clearInterval","className","onClick","Component","App","console","log","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAGqBA,G,kNAEjBC,MAAQ,CACJC,UAAU,G,EAWdC,eAAiB,WACV,EAAKC,MAAMC,WACV,EAAKC,c,EAIbA,WAAa,WACT,EAAKC,SAAS,CACVL,UAAU,IAGd,IAAIM,EAAI,EAAKJ,MAAMK,MAAM,IACzB,EAAKC,SAAWC,aAAY,WACxB,EAAKJ,UAAS,SAAAK,GACd,MAAO,CACHH,MAAOG,EAAUH,MAAQ,EAAKL,MAAMS,SAGnC,IAANL,IACE,EAAKM,uBACH,EAAKV,MAAMW,YAAc,EAAKX,MAAMY,YAE3CR,MACG,EAAKJ,MAAMS,MAIX,EAAKT,MAAMW,YAAc,EAAKX,MAAMW,c,EAK3CE,WAAa,WACT,EAAKH,uBACD,EAAKP,SAAS,CACVL,UAAU,IAGf,EAAKE,MAAMc,WAAY,EAAKd,MAAMc,a,EAIzCC,WAAa,WAAO,IACTV,EAAS,EAAKL,MAAdK,MACP,EAAKF,SAAS,CACVL,UAAU,EACVO,MAAOA,IAGR,EAAKL,MAAMC,WACV,EAAKY,aACL,EAAKX,cAEL,EAAKW,aAIN,EAAKb,MAAMgB,YAAa,EAAKhB,MAAMgB,c,kEAjEtB,IACTX,EAASY,KAAKjB,MAAdK,MACPY,KAAKd,SAAS,CACVE,MAAOA,IAEXY,KAAKlB,mB,6CAgELmB,cAAcD,KAAKX,Y,+BAIb,IACCD,EAASY,KAAKpB,MAAdQ,MACP,OACI,yBAAKc,UAAU,mBACX,yBAAKA,UAAU,aAAf,kBAA2Cd,EAAM,KAC7C,4BAAQc,UAAU,YAAYC,QAASH,KAAKpB,MAAMC,SAAWmB,KAAKJ,WAAaI,KAAKf,YAC/Ee,KAAKpB,MAAMC,SAAW,QAAU,SAEjC,4BAAQqB,UAAU,YAAYC,QAASH,KAAKF,YAA5C,c,GAvFWM,cCgBpBC,E,uKAdP,OACI,6BACI,kBAAC,EAAD,CAAOjB,MAAO,IAAOI,KAAM,MAC3B,kBAAC,EAAD,CAAOJ,MAAO,IAAOI,KAAM,IAAMR,WAAS,EACtCU,WAAY,kBAAMY,QAAQC,IAAI,kBAC9BV,UAAW,kBAAMS,QAAQC,IAAI,kBAC7BR,WAAY,kBAAMO,QAAQC,IAAI,oBAC9BZ,SAAU,kBAAMW,QAAQC,IAAI,qB,GAT9BC,IAAMJ,WCSJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.b99eebdf.chunk.js","sourcesContent":["import React, { Component }  from 'react';\r\nimport './Timer.css';\r\n\r\nexport default class Timer extends Component {\r\n\r\n    state = {\r\n        isActive: false,\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {count} = this.props;\r\n        this.setState({\r\n            count: count,\r\n        });\r\n        this.autoStartTimer();\r\n    }\r\n\r\n    autoStartTimer = () => {\r\n        if(this.props.autostart){\r\n            this.startTimer();\r\n        }\r\n    }\r\n\r\n    startTimer = () => {\r\n        this.setState({\r\n            isActive: true,\r\n        });\r\n\r\n        let i = this.props.count/1000;\r\n        this.interval = setInterval(() => {\r\n            this.setState(prevState => {\r\n            return {\r\n                count: prevState.count - this.props.step\r\n            }\r\n        });\r\n        if(i === 1){\r\n             this.componentWillUnmount();\r\n            if(this.props.timerStart) { this.props.timerOut() }\r\n        }\r\n        i--;\r\n        }, this.props.step);\r\n\r\n\r\n        //Timer started\r\n        if(this.props.timerStart) { this.props.timerStart() }\r\n\r\n    };\r\n\r\n\r\n    pauseTimer = () => {\r\n        this.componentWillUnmount();\r\n            this.setState({\r\n                isActive: false\r\n            })\r\n        //Timer stopped\r\n        if(this.props.timerStop) {this.props.timerStop()}\r\n    };\r\n\r\n\r\n    resetTimer = () => {\r\n        const {count} = this.props;\r\n        this.setState({\r\n            isActive: false,\r\n            count: count\r\n        });\r\n\r\n        if(this.props.autostart){\r\n            this.pauseTimer();\r\n            this.startTimer();\r\n        } else {\r\n            this.pauseTimer();\r\n        }\r\n\r\n        //Timer restarted\r\n        if(this.props.timerReset) {this.props.timerReset()}\r\n    };\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {count} = this.state\r\n        return (\r\n            <div className=\"timer-container\">\r\n                <div className=\"timer-box\">Current count: {count/1000}</div>\r\n                    <button className=\"timer-btn\" onClick={this.state.isActive ? this.pauseTimer : this.startTimer}>\r\n                        {this.state.isActive ? 'Pause' : 'Start'}\r\n                    </button>\r\n                        <button className=\"timer-btn\" onClick={this.resetTimer}>\r\n                    Reset\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport Timer from \"./Timer/Timer.js\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <Timer count={20000} step={1000}/>\n                <Timer count={20000} step={1000} autostart\n                    timerStart={() => console.log(\"Timer started\")}\n                    timerStop={() => console.log(\"Timer stopped\")}\n                    timerReset={() => console.log(\"Timer restarted\")}\n                    timerOut={() => console.log(\"Timer out\")}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}